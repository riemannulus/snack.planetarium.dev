<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><title>Planetarium Engineering Snack</title><link rel="self" href="https://snack.planetarium.dev/eng/index.xml"/><link rel="alternate" href="https://snack.planetarium.dev/eng/" title="Planetarium Engineering Snack"/><link rel="alternate" href="https://snack.planetarium.dev/kor/" hreflang="ko" title="플라네타리움 엔지니어링 스낵"/><updated>2020-04-28T00:00:00+00:00</updated><id>https://snack.planetarium.dev/eng/</id><entry><title>Libplanet 0.9 Released</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2020/04/libplanet-0.9/" title="Libplanet 0.9 Released"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2020/04/libplanet-0.9/" hreflang="ko" title="Libplanet 0.9 릴리스"/><id>https://snack.planetarium.dev/eng/2020/04/libplanet-0.9/</id><published>2020-04-28T00:00:00+00:00</published><updated>2020-04-28T00:00:00+00:00</updated><content type="html">&lt;p>Hello Everyone! We have released the ninth minor version of &lt;a href="https://libplanet.io/">Libplanet&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.9.0">Version 0.9&lt;/a>.&lt;/p>
&lt;p>Libplanet is a common library that solves game implementation problems such as P2P communication and data synchronization when creating online multiplayer games that run on distributed P2P.&lt;/p>
&lt;p>From this version, Libplanet will be distributed in several NuGet packages. This is because Libplanet&amp;rsquo;s externalities have expanded, making it too heavy to include some of the dependent libraries across all applications.&lt;/p>
&lt;p>This piece introduces the new NuGet packages and addresses key major changes in Version 0.9.&lt;/p>
&lt;h2 id="libplanetrocksdbstore">&lt;a href="https://www.nuget.org/packages/Libplanet.RocksDBStore/">Libplanet.RocksDBStore&lt;/a>&lt;/h2>
&lt;p>A newly added Nuget package, Libplanet.RocksDBStore includes &lt;code>RocksDBStore&lt;/code> class, which is Lipblanet&amp;rsquo;s &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.Store.IStore.html">&lt;code>IStore&lt;/code> interface&lt;/a> implemented as &lt;a href="https://rocksdb.org/">RocksDB&lt;/a> backend. Through internal testing, &lt;code>RocksDBStore&lt;/code> has shown to be about 10 times faster to write, 2 times faster to read, and thanks to compression, takes 15% less storage space than &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.Store.DefaultStore.html">&lt;code>DefaultStore&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Despite the advantages mentioned above, it might be difficult to use &lt;code>RocksDBStore&lt;/code> on some platforms because the RocksDB native binary, written in C++, needs to be distributed together with an application.
Therefore, &lt;code>RocksDBStore&lt;/code> class is not distributed as a Libplanet package, but as a separate NuGet package called Libplanet.RocksDBStore. &lt;code>DefaultStore&lt;/code> is still available in the Libplanet package. And so when developing, you can first use &lt;code>DefaultStore&lt;/code> that&amp;rsquo;s easy to install and use &lt;code>RocksDBStore&lt;/code> only for testing and actual deployment. Or, for platforms that are difficult to provide RocksDB binaries, you can just go with the &lt;code>DefaultStore&lt;/code>.&lt;/p>
&lt;p>For more information, see &lt;a href="https://snack.planetarium.dev/eng/2020/04/rocksdb/">Applying RocksDB to Libplanet&lt;/a> written by Seunghun Lee.&lt;/p>
&lt;h2 id="receiving-blocks-from-multiple-peers">Receiving Blocks from Multiple Peers&lt;/h2>
&lt;p>Up to this version, &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.Net.Swarm-1.html#Libplanet_Net_Swarm_1_PreloadAsync_System_Nullable_TimeSpan__IProgress_Libplanet_Net_PreloadState__IImmutableSet_Libplanet_Address__EventHandler_Libplanet_Net_PreloadBlockDownloadFailEventArgs__CancellationToken_">&lt;code>PreloadAsync()&lt;/code>&lt;/a> and &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.Net.Swarm-1.html#Libplanet_Net_Swarm_1_StartAsync_TimeSpan_TimeSpan_CancellationToken_">&lt;code>StartAsync()&lt;/code> method&lt;/a> of &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.Net.Swarm-1.html">&lt;code>Swarm&amp;lt;T&amp;gt;&lt;/code> class&lt;/a> requested and received all blocks from a single peer to catch up with blocks piled up on the network. But unfortunately, if there were many piles of blocks, it would take a long time to get them from just one peer.
And if you were unlucky, you might request blocks from a peer with a very slow connection which would take extra longer time. It also put a lot of pressure on the peer that’s sending the blocks and it was especially hard to ignore the burden for seed nodes that were set by default for deployed applications.&lt;/p>
&lt;p>So starting with this version, block downloads are improved to be evenly distributed across multiple peers and even when there’s a slow peer among the senders, the downloading speed has been significantly reduced.&lt;/p>
&lt;h2 id="signed-app-protocol-version">Signed App Protocol Version&lt;/h2>
&lt;p>Last year, &lt;a href="https://snack.planetarium.dev/eng/2019/05/libplanet-0.3/#responsive-apis-for-nodes-with-different-versions">Libplanet 0.3 added &lt;code>appProtocolVersion&lt;/code> parameter in the &lt;code>Swarm&amp;lt;T&lt;/code>() constructor.&lt;/a> This allowed nodes with compatible protocols to communicate with each other and adequately handled nodes without compatible protocols according to the application.&lt;/p>
&lt;p>Our team also took advantage of this feature and used it for software updates when encountering a higher version of the node. But with this use, we realized that a modulated software could be used to maliciously display high-version numbers (which have never been reported) and attack other nodes to attempt false software updates.&lt;/p>
&lt;p>To avoid this, the application protocol version that used to be described as &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.int32">&lt;code>System.Int32&lt;/code>&lt;/a> is now changed to &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.Net.AppProtocolVersion.html">&lt;code>AppProtocolVersion&lt;/code> type&lt;/a>, which includes multiple metadata such as signatures and signers. The app protocol version must be signed, and each node will &lt;em>individually&lt;/em> determine which signer&amp;rsquo;s version of the app protocol it will trust using the &lt;code>trustedAppProtocolVersionSigners&lt;/code> parameter in the &lt;code>Swarm&amp;lt;T&amp;gt;()&lt;/code> constructor.&lt;/p>
&lt;p>This approach protects each node from unintended (modified) software updates, while also giving each node the freedom to choose a different application roadmap that is freely forked if desired.&lt;/p>
&lt;h2 id="key-storage">Key Storage&lt;/h2>
&lt;p>Last year, &lt;a href="https://snack.planetarium.dev/eng/2019/11/libplanet-0.7/#key-store-implementation-to-safely-store-personal-keys">Libplanet added a &lt;code>ProtectedPrivateKey&lt;/code> class to safely store &lt;code>PrivateKey&lt;/code> in Version 0.7.&lt;/a> However, because &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.KeyStore.ProtectedPrivateKey.html">&lt;code>ProtectedPrivateKey&lt;/code>&lt;/a> deals with only one key, handling multiple keys required a separate implementation for the application to create a directory, set a file name, and write the file.&lt;/p>
&lt;p>So from this version, &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.KeyStore.Web3KeyStore.html">&lt;code>Web3KeyStore&lt;/code>&lt;/a> class, which physically preserves and manages keys, are now available, eliminating the need to implement these features separately. In addition to the &lt;code>Web3KeyStore&lt;/code> that preserves keys in &lt;a href="https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition">Web3 Secret Storage Definition&lt;/a> format, we have also introduced &lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.KeyStore.IKeyStore.html">&lt;code>IKeyStore&lt;/code> Interface&lt;/a>, which abstracts specific preservation methods (implementation details).&lt;/p>
&lt;h2 id="planet-cli-utility">&lt;code>planet&lt;/code>: CLI Utility&lt;/h2>
&lt;p>&lt;a href="https://docs.libplanet.io/0.9.0/api/Libplanet.Net.Swarm-1.html#Libplanet_Net_Swarm_1__ctor_Libplanet_Blockchain_BlockChain__0__Libplanet_Crypto_PrivateKey_Libplanet_Net_AppProtocolVersion_System_Int32_System_String_System_Nullable_System_Int32__IEnumerable_Libplanet_Net_IceServer__Libplanet_Net_DifferentAppProtocolVersionEncountered_IEnumerable_Libplanet_Crypto_PublicKey__">&lt;code>Swarm&amp;lt;T&amp;gt;()&lt;/code> constructor&lt;/a> has &lt;a href="https://snack.planetarium.dev/eng/2020/02/libplanet-0.8/#genesis-block-anticipation">assumed a specific genesis block since last version&lt;/a> and &lt;a href="#signed-app-protocol-version">from this version, it signs the app protocol version.&lt;/a> Because these values include the results of cryptographic algorithm, it is impossible for a human to randomly generate the value. However, since the development process does require a lot of filling up random values, it was definitely a hassle to call up Libplanet APIs from C# interactive shells or PowerShell to calculate the desired values.&lt;/p>
&lt;p>To make this easier, we are deploying a &lt;abbr title="command-line interface">CLI&lt;/abbr> utility called &lt;code>planet&lt;/code> from this version. The &lt;code>planet&lt;/code> command contains multiple subcommands, and currently provides key storage management and app protocol version signing feature. In the future, features such as creating a random genesis block will be added. Please check the &lt;code>planet --help&lt;/code> command for detailed instructions.&lt;/p>
&lt;p>The &lt;code>planet&lt;/code> command is distributed in a NuGet package called &lt;a href="https://www.nuget.org/packages/Libplanet.Tools/">Libplanet.Tools&lt;/a>, which can be installed on systems with .NET Core SDK using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff">&lt;code class="language-bash" data-lang="bash">dotnet tool install -g Libplanet.Tools
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the .NET Core SDK is not installed, you can also download and install the official binary uploaded on the &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.9.0">Release Page&lt;/a>. The official binary is available in three versions: Linux (x64), macOS (x64), and Windows (x64).&lt;/p>
&lt;h2 id="furthermore">Furthermore&lt;/h2>
&lt;p>You can learn more about additional changes in our &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.9.0">release notes&lt;/a>.&lt;/p>
&lt;p>If you’re interested, install and try it out! And as always, if you have any questions about the new release or Libplanet in general, please visit our &lt;a href="https://discord.gg/planetarium">Discord chatroom&lt;/a> and let’s chat!&lt;/p></content><author><name>Hong Minhee</name><uri>https://github.com/dahlia</uri><email>hong.minhee@planetariumhq.com</email></author></entry><entry><title>Applying RocksDB to Libplanet</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2020/04/rocksdb/" title="Applying RocksDB to Libplanet"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2020/04/rocksdb/" hreflang="ko" title="Libplanet RocksDB 적용기"/><id>https://snack.planetarium.dev/eng/2020/04/rocksdb/</id><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><content type="html">&lt;p>Hello, I&amp;rsquo;m Seunghun Lee, &lt;a href="https://libplanet.io/">Libplanet&lt;/a> developer at Planetarium.&lt;/p>
&lt;p>Libplanet provides a storage layer abstraction interface called &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Store.IStore.html">&lt;code>IStore&lt;/code>&lt;/a> and its basic implementation called &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Store.DefaultStore.html">&lt;code>DefaultStore&lt;/code>&lt;/a>. &lt;code>DefaultStore&lt;/code> had been used to develop &lt;a href="https://nine-chronicles.com/">Nine Chronicles&lt;/a> and although it was included as a base in Libplanet and had the upside of being able to use it immediately, there were certainly limitations in terms of performance and storage efficiency.&lt;/p>
&lt;p>After reviewing various alternative storage methods, we decided that &lt;a href="https://rocksdb.org/">RocksDB&lt;/a>, a &lt;a href="https://en.wikipedia.org/wiki/Key-value_database">Key-Value Database&lt;/a> library developed by Facebook, was our best option. We decided to create an &lt;code>IStore&lt;/code> implementation called &lt;a href="https://github.com/planetarium/libplanet/blob/master/Libplanet.RocksDBStore/RocksDBStore.cs">&lt;code>RocksDBStore&lt;/code>&lt;/a> to use as a backend. In this article, I would like to share our experiences in developing &lt;code>RocksDBStore&lt;/code>.&lt;/p>
&lt;h2 id="including-dependent-libraries1">Including Dependent Libraries&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>RocksDB relies on other libraries for compression or memory allocation purposes. Unlike &lt;a href="https://github.com/facebook/rocksdb/wiki/Building-on-Windows">Windows build&lt;/a>, for macOS and Linux, the dependent libraries must also be installed in the system to use the RocksDB native library in the form of dynamic link libraries (&lt;em>.so&lt;/em> and .&lt;em>dylib&lt;/em>).&lt;/p>
&lt;p>In a typical server app, it is natural to install all dependent libraries in your system. This is because the system that runs the server app is usually operated only for that server app. But because we&amp;rsquo;re building an app that serves as blockchain nodes and runs on gamers&amp;rsquo; systems, it&amp;rsquo;s hard to ask all gamers to install these libraries separately.&lt;/p>
&lt;p>So what we came up with was to put the libraries that RocksDB relies on in the game client and distribute them. However, building RocksDB in the form of a dynamic link library without any modifications caused the built RocksDB library to not be able to find the dependent libraries that were included in the game clients.&lt;/p>
&lt;p>To resolve this issue, we used a method of modifying &lt;a href="https://en.wikipedia.org/wiki/Rpath">rpath&lt;/a> in the RocksDB dynamic link library file. rpath refers to &lt;q>run-time search path&lt;/q>, which is hard-coded within a library file or executable file so the &lt;a href="https://en.wikipedia.org/wiki/Dynamic_linker">dynamic linking&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Loader_(computing)">loader&lt;/a> can find the required library in that file. Initially, we considered modifying the rpath when building the RocksDB library, but we eventually decided to modify the rpath in the completed library file because the build script in RocksDB turned out to be more complicated than we thought. Fortunately, with tools called &lt;a href="https://www.unix.com/man-page/osx/1/install_name_tool/">&lt;code>install_name_tool&lt;/code>&lt;/a> on macOS and &lt;a href="https://github.com/NixOS/patchelf">&lt;code>patchelf&lt;/code>&lt;/a> on Linux, you can simply modify the rpath to the directory where the current RocksDB library exists.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#888"># macOS&lt;/span>
$ install_name_tool -add-rpath &lt;span style="color:#d20;background-color:#fff0f0">&amp;#39;@loader_path&amp;#39;&lt;/span> librocksdb.dylib
&lt;span style="color:#888"># linux&lt;/span>
$ patchelf --set-rpath &lt;span style="color:#369">$ORIGIN&lt;/span> librocksdb.so
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more information on rpath modification, please refer to the pages below:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@donblas/fun-with-rpath-otool-and-install-name-tool-e3e41ae86172">Fun with rpath, otool, and install_name_tool&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mindonmind.github.io/notes/linux/change_rpath.html">Change Library Search Path For Binary Files in Linux&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="implementing-database-capabilities-in-applications">Implementing Database Capabilities in Applications&lt;/h2>
&lt;p>RocksDB supports relatively simple functionality, unlike the common &lt;a href="https://en.wikipedia.org/wiki/Relational_database">relational database&lt;/a> or &lt;a href="https://www.litedb.org/">LiteDB&lt;/a> used in &lt;code>DefaultStore&lt;/code>. Therefore, commonly supported features are often required to be directly implemented by the application when using RocksDB.&lt;/p>
&lt;p>For instance, since there is no method to count the number of rows of stored data, it is necessary to implement them using various ways, such as storing the number separately every time data is updated or counting while traversing the entire data on each update.&lt;/p>
&lt;p>Another example is the key search feature. RocksDB&amp;rsquo;s &lt;code>Seek&lt;/code> takes the prefix of the key as input to locate the key. While it&amp;rsquo;s easy to assume that this feature will only find keys that match the prefix like a typical database search, it&amp;rsquo;s actually more similar to &lt;a href="http://man7.org/linux/man-pages/man2/lseek.2.html">&lt;code>lseek()&lt;/code>&lt;/a>, which moves the offset of the file. Therefore, when using this feature to traverse a key, you need to check at each key that the first head of that key matches the string parts you are looking for.&lt;/p>
&lt;h2 id="common-mistakes-when-overlooking-the-docs">Common Mistakes when Overlooking the Docs&lt;/h2>
&lt;p>The APIs and documentation of RocksDB were not as user-friendly as expected, so extra attention was needed to use it.&lt;/p>
&lt;p>One example was the &lt;a href="https://github.com/facebook/rocksdb/wiki/Column-Families">Column Family&lt;/a>, which acts like a namespace. After creating a column family in the database, we expected the column family to be brought up automatically when using the database again. However, an exception occurs if we did not specify all column families in the database using the API called &lt;code>ListColumnFamilies&lt;/code> when opening the database.&lt;/p>
&lt;p>Also, although RocksDB uses GitHub Wiki for documentation, there is no separate arrangement such as documents divided by version. For example, if you look at the document for &lt;a href="https://github.com/facebook/rocksdb/wiki/Prefix-Seek">prefix seek&lt;/a>, the most recent usage is written at the end of the document, making it easy to use the outdated one if you only read the first part of the document.&lt;/p>
&lt;h2 id="problems-with-binding-libraries">Problems with Binding Libraries&lt;/h2>
&lt;p>Finally, let’s talk about &lt;a href="https://github.com/warrenfalk/rocksdb-sharp">rocksdb-sharp&lt;/a>, a C# binding library of RocksDB.&lt;/p>
&lt;p>Among &lt;code>RocksDBStore&lt;/code> codes, one code handles &lt;code>RocksDBException&lt;/code> of rocksdb-sharp. But on some platforms, we experienced the following unusual issue while handling this exception.&lt;/p>
&lt;pre>&lt;code>ExecutionEngineException: String conversion error: Illegal byte sequence encounted in the input.
&lt;/code>&lt;/pre>
&lt;p>After looking at the code, we figured out that this was caused by rocksdb-sharp using the &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.ptrtostringansi?view=netframework-4.8">&lt;code>Marshal.PtrToStringAnsi()&lt;/code>&lt;/a> method when encoding an error message generated by RocksDB. Since we were forking rocksdb-sharp to solve the library dependency problem discussed above, we were able to solve the problem without much difficulty by changing the particular method to &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.ptrtostringuni?view=netframework-4.8">&lt;code>Marshal.PtrToStringUni()&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="closing">Closing&lt;/h2>
&lt;p>Through many different processes, we have applied RocksDB and experienced improvements in storage space and speed. Please refer to our &lt;a href="https://github.com/planetarium/libplanet/blob/master/Libplanet.RocksDBStore/RocksDBStore.cs">code&lt;/a> for detailed implementation.&lt;/p>
&lt;p>And as always, if you have any questions about RocksDBStore or Libplanet in general, please visit our &lt;a href="https://discord.gg/planetarium">Discord&lt;/a> and let’s chat!&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>We took this approach during this phase because Nine Chronicles was being tested to only a small number of players, enabling us to distribute files without an installer. However, now that we’re deploying Nine Chronicles with an installer, other approaches have been developed. We will introduce some of them on Snack in the near future. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content><author><name>Seunghun Lee</name><uri>https://github.com/earlbread</uri><email>seunghun@planetariumhq.com</email></author></entry><entry><title>Libplanet Game Jam</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2020/03/libplanet-gamejam/" title="Libplanet Game Jam"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2020/03/libplanet-gamejam/" hreflang="ko" title="Libplanet 게임잼"/><id>https://snack.planetarium.dev/eng/2020/03/libplanet-gamejam/</id><published>2020-03-19T00:00:00+00:00</published><updated>2020-03-19T00:00:00+00:00</updated><content type="html">&lt;p>Hello, I&amp;rsquo;m Seunggeol Song, a game client programmer at Planetarium. This time, I&amp;rsquo;d like to share with you my experience in the in-house &lt;a href="https://en.wikipedia.org/wiki/Game_jam">game jam&lt;/a>
held at Planetarium.&lt;/p>
&lt;p>Here at Planetarium, we use our own blockchain game library, &lt;a href="https://github.com/planetarium/libplanet">Libplanet&lt;/a>, to create games. Because Libplanet is currently being developed with the assumption that it will be primarily used in &lt;a href="https://unity.com/">Unity&lt;/a>, we have decided to build an &lt;a href="https://en.wikipedia.org/wiki/Software_development_kit">SDK&lt;/a> for Unity to enhance usability within the engine. To aid our development process, we held an in-house game Jam of creating small example Unity projects using Libplanet.&lt;/p>
&lt;p>Groups of 2 or 3 people were formed and for 2 days before the opening day, we got together to brainstorm potential game projects and eventually came up with 5 dazzling game proposals to apply blockchain technology. I teamed up with &lt;a href="https://github.com/limebell">Chanhyuck Ko&lt;/a> to make a game of &lt;a href="https://en.wikipedia.org/wiki/Gomoku">Omok (Five in a Row)&lt;/a>. To make two players battle, we implemented the concept of a session (i.e. the &lt;strong>room&lt;/strong> of the game), using the concept of &lt;code>Action&lt;/code> and &lt;code>State&lt;/code> in Libplanet.&lt;/p>
&lt;figure>
&lt;img src="screenshot.png"
alt="The Great Looking Omok Game We Created!"/> &lt;figcaption>
&lt;p>The Great Looking Omok Game We Created!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>First, let me introduce some key states and the actions that change them.&lt;/p>
&lt;p>&lt;code>SessionState&lt;/code>: This state saves the session’s information. There is a unique key (room title concept) to distinguish a session from a list in &lt;code>AgentState&lt;/code>, which is the player information in the session. There is also an address that lets you have access to this state.&lt;/p>
&lt;p>&lt;code>AgentState&lt;/code>: This state saves account information of a player. Here we have the player&amp;rsquo;s information (typically wins and losses) and address.&lt;/p>
&lt;p>&lt;code>PlayerState&lt;/code>: This state saves information about the Go stones used by a player in the game. The coordinates of the stones in the Omok table are stored.&lt;/p>
&lt;p>&lt;code>JoinSession&lt;/code>: This action joins a session with the key a player enters. If there’s no session with the entered key, this action creates a new session with that key. This will change &lt;code>SessionState&lt;/code>.&lt;/p>
&lt;p>&lt;code>PlaceAction&lt;/code>: This action places a Go stone on the Omok table. This changes the stone information of &lt;code>PlayerState&lt;/code>.&lt;/p>
&lt;p>&lt;code>ResignAction&lt;/code>: This action surrenders the game. It changes both players&amp;rsquo; &lt;code>AgentState&lt;/code>, recording a loss to the loser and a win to the winner.&lt;/p>
&lt;p>For more specific internal implementation or code, visit the &lt;a href="https://github.com/planetarium/planet-omok">GitHub repository&lt;/a>!&lt;/p>
&lt;p>From the overall experience, I felt that the key to developing blockchain games using Libplanet is ultimately knowing how to deal with these states and actions. Action changes states and we take those states in-game logic to play the game. Before game jam, I didn&amp;rsquo;t have the chance to develop an action myself because I had only recently joined Planetarium. But after implementing the general concept of the session with Chanhyuck Ko, I was able to understand the meaning of action and state and their general usage. It was a great learning experience in many ways.&lt;/p>
&lt;h2 id="closing">Closing&lt;/h2>
&lt;p>If you’re also interested in learning these concepts, I recommend you to take a look at the &lt;a href="https://github.com/planetarium/planet-clicker">Planet Clicker GitHub repository&lt;/a>, which is a clicker game that&amp;rsquo;s easy to use while getting familiar with the action and state structure. And as always, if you have any questions, please visit our &lt;a href="https://discord.gg/planetarium">Discord chatroom&lt;/a> and let’s chat!&lt;/p></content><author><name>Seunggeol Song</name><uri>https://github.com/unengine</uri><email>ssg@planetariumhq.com</email></author></entry><entry><title>Game Developer Meets Libplanet 😂</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2020/02/hi-libplanet-i-am-game-developer/" title="Game Developer Meets Libplanet 😂"/><id>https://snack.planetarium.dev/eng/2020/02/hi-libplanet-i-am-game-developer/</id><published>2020-02-26T00:00:00+00:00</published><updated>2020-02-26T00:00:00+00:00</updated><content type="html">&lt;p>Hello, I&amp;rsquo;m Hyun Seungmin from Planetarium game dev team. Today, I’ll talk about applying &lt;dfn>&lt;abbr title="peer-to-peer">P2P&lt;/abbr>&lt;/dfn> structure to a game using Libplanet instead of the typical &lt;dfn>client–server&lt;/dfn> structure. Please note that the contents are entirely based on my experience.&lt;/p>
&lt;p>First, let&amp;rsquo;s talk about the &lt;em>client–server&lt;/em> structure. Most projects I&amp;rsquo;ve participated in dealt with client-server structures. In these structures, protocols are constructed for communication purposes, designed to be similar to Web communication. When a client makes a request and hands it over to a server, the server makes a response and returns it to the client. The request mainly consists of a user input, and the response contains error codes with the protocol&amp;rsquo;s success or failure information and the affected status value (i.e. the &lt;dfn>change&lt;/dfn>). Of course, the response doesn&amp;rsquo;t need to include changes that could be predicted by the client (including the amount of gold remaining after purchase in response to a purchase request).&lt;/p>
&lt;p>Next, let&amp;rsquo;s look at the &lt;em>P2P&lt;/em> structure that I&amp;rsquo;m currently developing. Libplanet constructs the protocol mentioned above in a class (i.e. &lt;dfn>action&lt;/dfn>) that implements the &lt;code>IAction&lt;/code> interface. When a client creates an action and hands it over to a node, the node collects the actions, creates a transaction, collects the transactions, and then creates a block. In this process, a &lt;code>Render&lt;/code> and an &lt;code>Unrender&lt;/code> event occur for each action, which allow the client to know whether the action is &lt;em>successful&lt;/em> or has been &lt;em>rolled back&lt;/em>.&lt;/p>
&lt;p>Although it may seem like a similar structure, on a client–server, the request and response may be separated so the response can contain request information (success or failure, the detailed reason if it fails) as well as the changes. On P2P the other hand, only the request (action) exists and only its information (even render or unrender information requires the node to meet a condition in which it does not stop) can be known. Instead, an interface to access the &lt;em>before and after status of the action&lt;/em> in each render or unrender stage is provided.&lt;/p>
&lt;p>The difference addressed above created a concern for me.&lt;/p>
&lt;blockquote>
&lt;p>How can we know the changes?&lt;/p>
&lt;/blockquote>
&lt;p>The issue was that when executing the action of adding an item to the character inventory, I wanted to avoid recreating the entire inventory.&lt;/p>
&lt;h3 id="1-compare-before-and-after-status-values-of-an-actions-render">1. Compare Before and After Status Values of an Action&amp;rsquo;s Render&lt;/h3>
&lt;p>The 1st option I thought of was to compare status values before and after the render of an action and extract the changes. However, I was worried that there would be performance issues while deserializing information serialized in blocks, casting them into status values A and B, and then comparing the two at every render·unrender stage. Status values A and B were already large, and there was plenty of room for further growth.&lt;/p>
&lt;h3 id="2-include-changes-in-each-action">2. Include Changes in Each Action&lt;/h3>
&lt;p>With my 2nd option, I thought that I could accomplish my goals without changing the existing structure and started right away. Despite the feeling that everything was going the way I wanted it to go, I realized that the tests we&amp;rsquo;ve done so far were on single nodes, and that there would be problems in a multi-node environment. Here’s why.&lt;/p>
&lt;p>All nodes participating in the network process a specific action, and &lt;code>IAction.PlainValue&lt;/code> property and &lt;code>IAction.LoadPlainValue()&lt;/code> method ensure that two processing results will be the same even if an action is processed and transmitted from another node. Although it seemed to work on a single node, I realized that in order for it to work on a multi-node, you had to include changes in the property, not somewhere else in the action. And if you actually went through this process (which I did to see what would happen), an &lt;code>InvalidTxSignatureException&lt;/code> occurs. This happens when the status value of an action changes. So the exception obviously occurs because the change is empty when you create an action and is filled after the action is rendered. From this process, I realized that the &lt;em>status value of an action is written so that it wouldn&amp;rsquo;t change&lt;/em>.&lt;/p>
&lt;p>Then I thought maybe I could include &lt;em>predictable changes&lt;/em> when creating an action. Unfortunately, this was easy to hack since the node would simply believe what the client created, so I cleared this idea from my mind in no time. But what if there was a way to verify the &lt;em>predictable change&lt;/em> within the action? So I asked the engine team, and they responded that the &lt;code>IRandom&lt;/code> interface provided by the engine is completely objective and therefore, a &lt;em>predictable change&lt;/em> does not exist. Now that’s good news.&lt;/p>
&lt;h3 id="3-include-changes-in-target-status-value-of-each-action">3. Include Changes in Target Status Value of Each Action&lt;/h3>
&lt;p>This method seemed fine, too. I had an expectation that including changes of an action in the target status value would allow us to achieve our goal with a simple expansion without structural modification. The changes of each action piled up in the target status value, and the client would refer to those changess stacked in the target status value at the render stage of a particular action. The change already calculated once didn’t need to be recalculated, and the reference timing of the change was also contextually secure, so client development was smooth. But of course, problems were bound to rise.&lt;/p>
&lt;blockquote>
&lt;p>How do we manage life cycles of specific actions’ changes that accumulate in the target status value?&lt;/p>
&lt;/blockquote>
&lt;p>Since change in status value only occurred through an action, a separate action was required to eliminate any changes that were no longer needed. If a target status value is changed to stack changes of Action A, and Action B is used to remove changes that are no longer needed, should those changes be put in the target status value? Yes, there was a logical exception so I&amp;rsquo;ve put this plan on hold.&lt;/p>
&lt;hr>
&lt;p>Even while writing this piece, Libplanet has become continuously powerful. The &lt;code>IActionContext&lt;/code> type factor, which is achieved in the execution stage of an action, provides an &lt;code>IRandom&lt;/code> interface so that the same result can be conclusively obtained across all nodes regardless of the action&amp;rsquo;s status value. While the random object provided by Unity cannot provide the same result across all nodes, the &lt;code>IRandom&lt;/code> interface can provide one. Do you see how option 2 might once again be possible?&lt;/p>
&lt;p>Next time, I&amp;rsquo;ll talk about the &lt;code>IRandom&lt;/code> interface and how to create a beautiful client environment.&lt;/p></content><author><name>Hyun Seungmin</name><uri>https://github.com/boscohyun</uri><email>seungmin@planetariumhq.com</email></author></entry><entry><title>Software from Year 2562 Emerges in Thailand?</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2020/02/thai-in-2562/" title="Software from Year 2562 Emerges in Thailand?"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2020/02/thai-in-2562/" hreflang="ko" title="태국에서만 2562년으로 가는 소프트웨어?"/><id>https://snack.planetarium.dev/eng/2020/02/thai-in-2562/</id><published>2020-02-25T00:00:00+00:00</published><updated>2020-02-25T00:00:00+00:00</updated><content type="html">&lt;h2 id="guest-from-the-future">Guest from the Future&lt;/h2>
&lt;p>Last December, we finally conducted our first alpha test, and thankfully, many people from all over the world participated. It was both a great opportunity and a challenge for the team. Of course, there were big and small problems. Among them, one problem that took us by surprise was IBD.&lt;/p>
&lt;p>&lt;abbr title="initial block download">IBD&lt;/abbr> is a stage that occurs when you turn on a game, download blocks from other peers in the network and sync them to the latest state. Since we had participants from all over the world, IBD often took a long time or even ended abnormally due to network delays.&lt;/p>
&lt;p>One of our participants reported a very unusual symptom. Unlike other problems we had at that time, the participant successfully downloaded the first block but couldn’t download the rest afterward.&lt;/p>
&lt;figure>
&lt;img src="1.png"
alt="Screenshot of Our Participant"/> &lt;figcaption>
&lt;p>Screenshot of Our Participant&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>We checked the screenshot our user sent us and realized one strange thing. The date was 2562 instead of 2019. So we came up with a hypothesis. For some reason, the file system was broken and the hash of the block header was being miscalculated.&lt;/p>
&lt;p>To verify this, we asked for permission to investigate the problem directly through remote desktop.&lt;/p>
&lt;h2 id="the-date-was-not-wrong">The Date Was Not Wrong&lt;/h2>
&lt;p>Fortunately, the user experiencing this problem kindly accepted our request for remote access. And once we were able to access the desktop, we saw that the date was still in 2562 as it appeared in the screenshot. First, we opened the Control Panel to sync time. Like most modern operating systems, Windows has the ability to synchronize time over the network. But when we resynchronized time, the control panel and the system&amp;rsquo;s year didn&amp;rsquo;t change and remained in 2562. Notably, apart from the year, date and time were no different from the system on our side.&lt;/p>
&lt;p>We decided to explore the problem a little bit more, and while checking out the control panel, one detail caught our attention.&lt;/p>
&lt;figure>
&lt;img src="2.png"
alt="Year Displayed as 2019 in Gregorian calendar"/> &lt;figcaption>
&lt;p>Year Displayed as 2019 in Gregorian calendar&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>No one in our development team could read Thai, but looking at &amp;ldquo;Date in Gregorian”, we noticed that &amp;ldquo;2562&amp;rdquo; was a different expression of &amp;ldquo;2019&amp;rdquo;. So we changed the format, and as expected, December 16th, 2019 was displayed. And when we launched the game for testing, it went smoothly at the IBD stage.&lt;/p>
&lt;h2 id="buddhist-calendar">Buddhist Calendar&lt;/h2>
&lt;p>Now that we had found a clue and a way to reproduce the issue, we suggested our user to set up the region in the US for the time being, and thankfully, our user agreed to our proposal.&lt;/p>
&lt;p>To reproduce this problem on our side, we changed the regional setting of our OS to Thailand in the local development environment and then ran the unit test of Libplanet. Sure enough, we were able to see some of them fail. The most crucial problem was that the hash of the same block was changing. As we looked closer, the result of &lt;a href="https://github.com/planetarium/libplanet/blob/82aaba0c37591ebf51207038e8c5c122272ce98b/Libplanet/Blocks/Block.cs#L488">serializing &lt;code>Block&amp;lt;T&amp;gt;.Timestamp&lt;/code> field&lt;/a> in the process of creating a hash input was different than expected. The behavior of the &lt;code>DateTimeOffset.ToString()&lt;/code> method was affected by the locale of the operating system.&lt;/p>
&lt;p>In Indochina Peninsula, Buddhism takes the same place as Christianity in Europe. So, instead of the &lt;a href="https://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian calendar&lt;/a>, which uses the birth of Jesus Christ as an epoch, countries in Indochina Peninsula had used the &lt;a href="https://en.wikipedia.org/wiki/Buddhist_calendar">Buddhist calendar&lt;/a> which takes Buddha’s attainment of parinirvana (nirvana after death) as an epoch. Although countries like Cambodia and Laos eventually took on the Gregorian calendar, Thailand still uses the &lt;a href="https://en.wikipedia.org/wiki/Thai_solar_calendar">Thai solar calendar&lt;/a>, which is a solar modification of the traditional Buddhist lunar calendar. Buddha’s parinirvana was in 543 BC, and so the year 2019 A.D. becomes 2562 under the Thai solar calendar.&lt;/p>
&lt;p>As such, the world uses various calendars depending on the cultural region. So when displaying a user interface, time should be displayed in the appropriate date format for each region. In fact, &lt;code>DateTimeOffset.ToString()&lt;/code> method has an overload that also receives &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.iformatprovider?view=netstandard-2.0">&lt;code>IFormatProvider&lt;/code>&lt;/a> objects as parameters for this purpose. &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=netstandard-2.0">&lt;code>CultureInfo&lt;/code>&lt;/a> is the most common class to implement the &lt;code>IFormatProvider&lt;/code> interface. As the name suggests, &lt;code>CultureInfo&lt;/code> is the same concept that the Unix family calls locale. As shown below, the result of &lt;code>DateTimeOffset.ToString()&lt;/code> method depends on which locale you set up as the parameter.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff">&lt;code class="language-csharp" data-lang="csharp">&amp;gt; &lt;span style="color:#080;font-weight:bold">using&lt;/span> &lt;span style="color:#b06;font-weight:bold">System.Globalization&lt;/span>;
&amp;gt; &lt;span style="color:#888;font-weight:bold">var&lt;/span> now = DateTimeOffset.Now;
&amp;gt; now.ToString(&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;yyyy-MM-ddTHH:mm:ss.ffffffZ&amp;#34;&lt;/span>, &lt;span style="color:#080;font-weight:bold">new&lt;/span> CultureInfo(&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;ko-KR&amp;#34;&lt;/span>))
&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;2020-02-13T17:37:16.436163Z&amp;#34;&lt;/span>
&amp;gt; now.ToString(&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;yyyy-MM-ddTHH:mm:ss.ffffffZ&amp;#34;&lt;/span>, &lt;span style="color:#080;font-weight:bold">new&lt;/span> CultureInfo(&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;th-TH&amp;#34;&lt;/span>))
&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;2563-02-13T17:37:16.436163Z&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, if you omit the parameter without setting any locale, the method will follow the locale of the environment in which the code is executed. The code below is the result of setting up the operating system region in Korea.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff">&lt;code class="language-csharp" data-lang="csharp">&amp;gt; now.ToString(&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;yyyy-MM-ddTHH:mm:ss.ffffffZ&amp;#34;&lt;/span>)
&lt;span style="color:#d20;background-color:#fff0f0">&amp;#34;2020-02-13T17:37:16.436163Z&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tostring?view=netstandard-2.0#System_DateTimeOffset_ToString">According to the docs, the overload with the omitted parameter&lt;/a> follows &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.currentculture?view=netstandard-2.0">&lt;code>CultureInfo.CurrentCulture&lt;/code>&lt;/a>. As you can infer from its name, the &lt;code>CultureInfo.CurrentCulture&lt;/code> property points to the locale of the execution environment. Therefore, you must explicitly specify &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.invariantculture?view=netstandard-2.0">&lt;code>CultureInfo.InvariantCulture&lt;/code>&lt;/a> if you want a deterministic action at all times regardless of the locale of your execution environment.&lt;/p>
&lt;p>Even though the method may be non-deterministic, the API designed to follow the locale of the execution environment is probably intended because such formatting operations are usually used for a user interface, and coding can naturally look appropriate to the cultural community without much concern about internationalization. But the reason why we used this method was not for a user interface, but for the cryptographic hash input that had to be deterministic— this turned out to be a mistake.&lt;/p>
&lt;p>Now that we know the cause, we have solved the urgent problem by &lt;a href="https://github.com/planetarium/libplanet/pull/734">finding a method that has the &lt;code>CultureInfo&lt;/code> or &lt;code>IFormatProvider&lt;/code> parameters omitted, and patching it to explicitly designate &lt;code>CultureInfo.InvariantCulture&lt;/code>, just like the method &lt;code>DateTimeOffset.ToString()&lt;/code>&lt;/a>.&lt;/p>
&lt;p>CI has also been reinforced with unit testing in Arabic, French, Hebrew locale and so on. Since there are a lot of countries in Europe that use comma (&lt;code>,&lt;/code>) instead of a period (&lt;code>.&lt;/code>) in decimal places, and countries in the Middle East that writes from right to left, we deliberately chose language regions that were somewhat unfamiliar to us.&lt;/p>
&lt;p>In addition, because similar mistakes can happen in the future, we have &lt;a href="https://github.com/planetarium/libplanet/pull/737">introduced static analysis&lt;/a> that finds codes whose behavior depends on the locale of the execution environment.&lt;/p>
&lt;h2 id="closing">Closing&lt;/h2>
&lt;p>As mentioned earlier, using APIs with non-determinant behaviors such as formatting in functions that calculate the cryptographic hash is not a good decision in the long run. Typically, because strings are heavily formatted, it&amp;rsquo;s safe to avoid them from data level perspective.&lt;/p>
&lt;p>But unfortunately, we found this problem in the middle of the test, and we haven&amp;rsquo;t made any major modifications yet because changing the hash method was a decision that would break the compatibility of previous data. However, these parts will be modified before releasing Libplanet 1.0.&lt;/p></content><author><name>Hong Minhee</name><uri>https://github.com/dahlia</uri><email>hong.minhee@planetariumhq.com</email></author><author><name>Swen Mun</name><uri>https://github.com/longfin</uri><email>swen@planetariumhq.com</email></author></entry><entry><title>Testing P2P Game with Kubernetes</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2020/02/k8s-1/" title="Testing P2P Game with Kubernetes"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2020/02/k8s-1/" hreflang="ko" title="쿠버네티스로 P2P 게임 테스트하기"/><id>https://snack.planetarium.dev/eng/2020/02/k8s-1/</id><published>2020-02-20T00:00:00+00:00</published><updated>2020-02-20T00:00:00+00:00</updated><content type="html">&lt;p>Hello, I am Swen Mun, &lt;a href="https://libplanet.io">Libplanet&lt;/a> developer at &lt;a href="https://planetariumhq.com">Planetarium&lt;/a>. From December 16th last year, we held a 2-week alpha test of &lt;a href="https://nine-chronicles.com">Nine Chronicles&lt;/a>, a fully decentralized MMORPG. Today, we&amp;rsquo;re going to share our experience deploying headless games on &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a>.&lt;/p>
&lt;h2 id="what-did-we-need">What Did We Need?&lt;/h2>
&lt;p>A game developed with Libplanet is considered a blockchain node, and the same goes for Nine Chronicles. That is, every game client can play a role that is in itself similar to a typical game server (data storage, refereeing). To hold a test as close to a game environment in this P2P environment, we needed to run as many of these game clients at the same time.&lt;/p>
&lt;p>Although we will be running the games, we’re focused on executing as many game clients at the same time so it&amp;rsquo;s not that important to see the screen of each client. Therefore, we’re OK with running headless without any UI.&lt;/p>
&lt;h2 id="test-conditions">Test Conditions&lt;/h2>
&lt;ul>
&lt;li>Games under testing (as with software in general) may need to be updated as necessary. It&amp;rsquo;s not a good strategy to go around all running clients and update them one by one.&lt;/li>
&lt;li>While it&amp;rsquo;s easy for an individual developer to run one or two clients, we want to test far more than just a handful.&lt;/li>
&lt;li>Although we will be running the games, we’re focused on executing as many game clients at the same time so it&amp;rsquo;s not that important to see the screen of each client. Therefore, we’re OK with running &lt;a href="https://en.wikipedia.org/wiki/Headless_software">headless&lt;/a> without any UI.&lt;/li>
&lt;/ul>
&lt;h2 id="docker">Docker&lt;/h2>
&lt;p>To meet these conditions, we needed to run and manage multiple processes at the same time, and that led us to use &lt;a href="https://docker.com">Docker&lt;/a>. Docker is a popular solution for containerizing and running Linux applications throughout your environment. Although we’re not considering Linux as a major platform for Nine Chronicle’s first launch, developing games with Unity has made it relatively easy to produce a build for Linux, and apart from minor UI bugs (which doesn&amp;rsquo;t matter much for the headless test node), the behavior didn&amp;rsquo;t change much.&lt;/p>
&lt;h2 id="kubernetes">Kubernetes&lt;/h2>
&lt;p>Even though we used a Docker to make a container that easily runs a game build, that wasn&amp;rsquo;t the end. Our goal was to easily run/end/update many clients while maintaining a test environment. To do this, just using Docker wasn’t enough.&lt;/p>
&lt;p>Our first option was the execution environment offered by cloud providers, such as &lt;abbr title="Elastic Container Service">&lt;a href="https://aws.amazon.com/ecs/?nc1=h_ls">ECS&lt;/a>&lt;/abbr>. These execution environments are designed to efficiently set up complex workflows. But in other words, they&amp;rsquo;re complex to set up and we wouldn’t be using a lot of functionality provided since we’re just using it in a test environment. Also, a test environment dependent on a particular cloud provider would likely to be a burden on future operations.&lt;/p>
&lt;figure>
&lt;img src="comparison.png"
alt="AWS Container Orchestration Comparison"/> &lt;figcaption>
&lt;p>AWS Container Orchestration Comparison&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>So the alternative we came up with was Kubernetes. Kubernetes is an open-source project that allows us to do what we want similar to services like ECS while being Provider Agnostic. The feature of running and stopping complex containers is called container orchestration, and because we wanted to run multiple containers (games) of the same kind, the setup wasn&amp;rsquo;t that complicated.&lt;/p>
&lt;h2 id="coming-up">Coming Up&lt;/h2>
&lt;p>Next time we&amp;rsquo;ll take a look at the specific procedures for setting up the Kubernetes for testing and how to deploy it on the cloud.&lt;/p></content><author><name>Swen Mun</name><uri>https://github.com/longfin</uri><email>swen@planetariumhq.com</email></author></entry><entry><title>Libplanet 0.8 Released</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2020/02/libplanet-0.8/" title="Libplanet 0.8 Released"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2020/02/libplanet-0.8/" hreflang="ko" title="Libplanet 0.8 릴리스"/><id>https://snack.planetarium.dev/eng/2020/02/libplanet-0.8/</id><published>2020-02-05T00:00:00+00:00</published><updated>2020-02-05T00:00:00+00:00</updated><content type="html">&lt;p>Hello All.&lt;/p>
&lt;p>Our team has released the eighth minor version of &lt;a href="https://libplanet.io/">Libplanet&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.8.0">Version 0.8&lt;/a>.&lt;/p>
&lt;p>Libplanet is a common library that solves game implementation problems such as P2P communication and data synchronization when creating online multiplayer games that run on distributed P2P.&lt;/p>
&lt;p>With the new version updated in nearly three months, there have been many improvements in version 0.8 including storage optimization. This article will cover major changes of Version 0.8.&lt;/p>
&lt;h2 id="genesis-block-anticipation">Genesis Block Anticipation&lt;/h2>
&lt;p>&lt;code>BlockChain&amp;lt;T&amp;gt;&lt;/code> now anticipates a particular genesis block. This is to prevent mistakes such as multiple games attempting to connect to the wrong network. Mistakes like above might occur because although games made from Libplanet form separate networks, Libplanet behaves in a type of metaprotocol.&lt;/p>
&lt;p>&lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Blockchain.BlockChain-1.html#Libplanet_Blockchain_BlockChain_1__ctor_Libplanet_Blockchain_Policies_IBlockPolicy__0__Libplanet_Store_IStore_Libplanet_Blocks_Block__0__">&lt;code>BlockChain&amp;lt;T&amp;gt;()&lt;/code> constructor&lt;/a> takes the &lt;code>Block&amp;lt;T&amp;gt;&lt;/code> object as a factor and the block becomes the first block. If genesis block contained in &lt;code>IStore&lt;/code> and the genesis block expected by the &lt;code>BlockChain&amp;lt;T&amp;gt;()&lt;/code> constructor do not match, &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Blocks.InvalidGenesisBlockException.html">&lt;code>InvalidGenesisBlockException&lt;/code>&lt;/a> will occur.&lt;/p>
&lt;p>Currently, the constructor receives the entire &lt;code>Block&amp;lt;T&amp;gt;&lt;/code> object, but &lt;a href="https://github.com/planetarium/libplanet/pull/769">the next version will have the constructor only receive the genesis block hash and the actual block content to be received from other nodes on the network.&lt;/a>&lt;/p>
&lt;h2 id="defaultstoredefaultstore--litedbstore">&lt;a href="https://docs.libplanet.io/master/api/Libplanet.Store.DefaultStore.html">&lt;code>DefaultStore&lt;/code>&lt;/a> ← &lt;code>LiteDBStore&lt;/code>&lt;/h2>
&lt;p>&lt;code>LiteDBStore&lt;/code>, a built-in &lt;code>IStore&lt;/code> implementation, has been removed and &lt;a href="https://docs.libplanet.io/master/api/Libplanet.Store.DefaultStore.html">&lt;code>DefaultStore&lt;/code>&lt;/a> has replaced it.&lt;/p>
&lt;p>The reason for this replacement is that while only a single LiteDB file was stored before, more files with multiple formats have been added to be stored within a directory from this version.&lt;/p>
&lt;p>Another reason was our intention to remove implementation details from the name, with efforts to optimize the repository until the 1.0.0 release.&lt;/p>
&lt;p>In addition, a &lt;code>compress&lt;/code> option has been created in the &lt;a href="https://docs.libplanet.io/master/api/Libplanet.Store.DefaultStore.html#Libplanet_Store_DefaultStore__ctor_System_String_System_Boolean_System_Boolean_System_Int32_System_Int32_System_Int32_System_Int32_System_Boolean_System_Boolean_">&lt;code>DefaultStore()&lt;/code> constructor&lt;/a> to reduce storage space. Although the option is still turned off by default in this version, the default will be changed to &lt;code>true&lt;/code> in the next version.&lt;/p>
&lt;h2 id="icryptobackendicryptobackend">&lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Crypto.ICryptoBackend.html">&lt;code>ICryptoBackend&lt;/code>&lt;/a>&lt;/h2>
&lt;p>To be used on a variety of platforms, Libplanet has been using a cryptographic library written in pure C#, &lt;a href="http://www.bouncycastle.org/csharp/">Bouncy Castle&lt;/a>. Although pure C# implementations are a great advantage in portability, they serve as a penalty in performance.&lt;/p>
&lt;p>In the new version, an abstraction layer called &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Crypto.ICryptoBackend.html">&lt;code>ICryptoBackend&lt;/code>&lt;/a> has been added to allow game developers to choose between portability and performance. While the default implementation, &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Crypto.DefaultCryptoBackend.html">&lt;code>DefaultCryptoBackend&lt;/code>&lt;/a>, is still internally dependent on Bouncy Castle, game developers can achieve performance benefits by implementing the &lt;code>ICryptoBackend&lt;/code> interface appropriately, depending on the game’s target platform.&lt;/p>
&lt;p>For example, if you want Libplanet to use &lt;code>MyCryptoBackend&lt;/code> class that implements &lt;code>ICryptoBackend&lt;/code>, you can overwrite &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Crypto.CryptoConfig.html#Libplanet_Crypto_CryptoConfig_CryptoBackend">&lt;code>CryptoConfig.CryptoBackend&lt;/code> property&lt;/a> as shown below.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff">&lt;code class="language-csharp" data-lang="csharp">CryptoConfig.CryptoBackend = &lt;span style="color:#080;font-weight:bold">new&lt;/span> MyCryptoBackend();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the case of &lt;a href="https://nine-chronicles.com/">Nine Chronicles&lt;/a>, a game currently being developed by our team, we have also improved game performance by implementing &lt;code>ICryptoBackend&lt;/code> interface that calls &lt;a href="https://github.com/bitcoin-core/secp256k1">secp256k1&lt;/a> C library unveiled in the Bitcoin project.&lt;/p>
&lt;h2 id="routing-table-improvement">Routing Table Improvement&lt;/h2>
&lt;p>Because Libplanet uses &lt;a href="https://snack.planetarium.dev/eng/2019/09/kademlia/">&lt;abbr title="distributed hash table">DHT&lt;/abbr>&lt;/a> to communicate with other peers, it stores information about the peers associated with itself on the routing table.&lt;/p>
&lt;p>Traditionally, this routing table only stored the most recent communication points with that peer. But now, we&amp;rsquo;ve also added a communication delay info to give you more information about the network environment.&lt;/p>
&lt;p>Developers can use the newly added &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Net.Swarm-1.html#Libplanet_Net_Swarm_1_CheckAllPeersAsync_System_Nullable_TimeSpan__CancellationToken_">&lt;code>Swarm&amp;lt;T&amp;gt;.CheckAllPeersAsync()&lt;/code> method&lt;/a> to update peers stored on routing tables, and access &lt;a href="https://docs.libplanet.io/0.8.0/api/Libplanet.Net.Swarm-1.html#Libplanet_Net_Swarm_1_Peers">&lt;code>Swarm&amp;lt;T&amp;gt;.Peers&lt;/code> property&lt;/a> from outside Libplanet to identify the peers currently on its routing tables.&lt;/p>
&lt;h2 id="changed-block-structure-and-serialization">Changed Block Structure and Serialization&lt;/h2>
&lt;p>A block that is a component of the blockchain can be divided into two parts: the transactions and the metadata excluding the transactions.&lt;/p>
&lt;p>As with many blockchain projects, we&amp;rsquo;ve defined the part minus the transactions as block headers, and we are now able to compute more efficiently than ever before by using a block header that contains more information compared to only using block hash for computation.&lt;/p>
&lt;p>In addition, when serializing blocks and transactions, field keys are shortened and the empty fields are completely excluded, making the serialized expression lighter.&lt;/p>
&lt;h2 id="documentation-improvement">Documentation Improvement&lt;/h2>
&lt;p>Although not a change to the library itself, there have been improvements in the design of the &lt;a href="https://docs.libplanet.io/0.8.0/">docs website&lt;/a> and a new &lt;a href="https://docs.libplanet.io/0.8.0/articles/overview.html">Overview&lt;/a> document written by Swen Mun has been added.&lt;/p>
&lt;h2 id="furthermore">Furthermore,&lt;/h2>
&lt;p>In addition, there have been a number of other changes while fixing many problems that we found during our 3 months of &lt;a href="https://nine-chronicles.com/">Nine Chronicles&lt;/a> public testing. Details can be found in the &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.8.0">entire change history&lt;/a>.&lt;/p>
&lt;p>If you&amp;rsquo;re curious, install it and try it. And as always, if you have any questions about the new release or Libplanet in general, please visit our &lt;a href="https://discord.gg/planetarium">Discord&lt;/a> chatroom and let’s chat!&lt;/p></content><author><name>Chanhyuck Ko</name><uri>https://github.com/limebell</uri><email>lime@planetariumhq.com</email></author><author><name>Hong Minhee</name><uri>https://github.com/dahlia</uri><email>hong.minhee@planetariumhq.com</email></author></entry><entry><title>Libplanet 0.7 Released</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/11/libplanet-0.7/" title="Libplanet 0.7 Released"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/11/libplanet-0.7/" hreflang="ko" title="Libplanet 0.7 릴리스"/><id>https://snack.planetarium.dev/eng/2019/11/libplanet-0.7/</id><published>2019-11-11T00:00:00+00:00</published><updated>2019-11-11T00:00:00+00:00</updated><content type="html">&lt;p>Hello everyone, our team has released the 7th minor version of &lt;a href="https://libplanet.io/">Libplanet&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.7.0">Version 0.7&lt;/a>.&lt;/p>
&lt;p>Libplanet is a common library that solves game implementation problems such as P2P communication and data synchronization when creating online multiplayer games that run on distributed P2P.&lt;/p>
&lt;p>Major changes in version 0.7 deal with stability and performance related improvements, as well as various usage improvements. In this article we will cover those key changes of Version 0.7.&lt;/p>
&lt;h2 id="type-limitations-of-actions-and-states">Type Limitations of Actions and States&lt;/h2>
&lt;p>In previous versions of Libplanet, states and properties of action were expressed in the &lt;code>object&lt;/code> type and serialized in &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/binary-serialization">.NET&amp;rsquo;s Binary Serialization&lt;/a> format when saved. Because this method allows you to serialize .NET objects as they are, there&amp;rsquo;s less burden for both parties that use or develop Libplanet. But ever since we started using this method, we decided to only use it short-term, recognizing the following limitations:&lt;/p>
&lt;ul>
&lt;li>The specific way serialization and deserialization takes place is implicit. While changes in type implementation affects the format being serialized, it&amp;rsquo;s difficult to determine what specific changes takes place.&lt;/li>
&lt;li>After type values of previously different shapes are serialized, stored in blockchain and then attempted deserialization to the current type, a runtime error may occur or the value may be interpreted as a different meaning than originally intended.&lt;/li>
&lt;li>If a type is defined by the team, you may use techniques such as &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/version-tolerant-serialization">VTS&lt;/a>, but if the type imported through a package other than an assembly made by the team is accidently mixed and serialized, it will be difficult to respond to serial format changes due to the changed inner expression of that type.&lt;/li>
&lt;li>Serialized results are difficult to interpret on platforms other than .NET, and also, deserialization is difficult if assembly including serialized type is not shared on .NET platform. This makes it difficult for people to see the properties of an action or the states of a particular point in time in an app such as &lt;a href="https://github.com/planetarium/libplanet-explorer">Libplanet Explorer&lt;/a> or &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/serialization/version-tolerant-serialization">Libplanet Explorer Frontend&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>So from this version, states and properties of action have been changed to be expressed as &lt;a href="https://github.com/planetarium/bencodex.net/blob/0.2.0/Bencodex/Types/IValue.cs">&lt;code>IValue&lt;/code>&lt;/a> type of &lt;a href="https://github.com/planetarium/bencodex.net">Bencodex&lt;/a>. Therefore, you must explicitly write a code that converts the types that you define and use inside the game into &lt;code>IValue&lt;/code> format, as well as a code that interprets what is expressed in the &lt;code>IValue&lt;/code> format back into the types in the game. It&amp;rsquo;s a little inconvenient, but even when the type of internal expression you&amp;rsquo;re trying to serialize changes, you can easily add processing logic to your serialization or reverse-serialization method, and it&amp;rsquo;s also easier to implement compatibility between different versions.&lt;/p>
&lt;h2 id="removed-ireadonlylistt-implementation-from-blockchaint">Removed &lt;code>IReadOnlyList&amp;lt;T&amp;gt;&lt;/code> Implementation from &lt;code>BlockChain&amp;lt;T&amp;gt;&lt;/code>&lt;/h2>
&lt;p>Up until the previous version, &lt;code>BlockChain&amp;lt;T&amp;gt;&lt;/code> class was implementing &lt;code>IReadOnlyList&amp;lt;T&amp;gt;&lt;/code> interface, which allowed us to use &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">LINQ&lt;/a> extension methods directly on the &lt;code>BlockChain&amp;lt;T&amp;gt;&lt;/code> object. The LINQ extension method provides a variety of convenience when handling linear objects, but depending on how you use it, it can significantly alter performance levels. For example, when there are 10,000 blocks in the &lt;code>BlockChain&amp;lt;T&amp;gt;&lt;/code> object and you want to import the 10,000th block using the &lt;code>.Last()&lt;/code> method of LINQ, it&amp;rsquo;s easy to think that only the last block is imported directly from the repository. But in reality, from the first block of &lt;code>BlockChain&amp;lt;T&amp;gt;&lt;/code>, to the last block, each block is loaded on memory and interpreted. This is not a big problem when few blocks are stored, but the more blocks are stored, the more performance issues they may lead to.&lt;/p>
&lt;p>Starting with this version, we removed the implementation of &lt;code>IReadOnlyList&amp;lt;T&amp;gt;&lt;/code> from the &lt;code>BlockChain&amp;lt;T&amp;gt;&lt;/code> class altogether to prevent problems that might result from misusing LINQ extension methods. Instead, often used computations such as &lt;a href="https://docs.libplanet.io/0.7.0/api/Libplanet.Blockchain.BlockChain-1.html#Libplanet_Blockchain_BlockChain_1_Contains_Libplanet_Blocks_Block__0__">&lt;code>BlockChain&amp;lt;T&amp;gt;.Contains()&lt;/code>&lt;/a> will be directly provided for efficient implementation.&lt;/p>
&lt;h2 id="key-store-implementation-to-safely-store-personal-keys">Key Store Implementation to Safely Store Personal Keys&lt;/h2>
&lt;p>In this version, we have added a Key Store to help you encrypt and secure your private key. Each key file in the Key Store is represented by the [&lt;code>ProtectedPrivateKey&lt;/code>] &lt;a href="https://docs.libplanet.io/0.7.0/api/Libplanet.KeyStore.ProtectedPrivateKey.html">ProtectedPrivateKey&lt;/a> class and can be saved by encrypting the private key with the passphrase you enter. Also, you can save it in JSON format based on &lt;a href="https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition">Web3 Secret Storage Definition&lt;/a> of &lt;a href="https://en.wikipedia.org/wiki/Ethereum">Ethereum&lt;/a> using the method &lt;a href="https://docs.libplanet.io/0.7.0/api/Libplanet.KeyStore.ProtectedPrivateKey.html#Libplanet_KeyStore_ProtectedPrivateKey_WriteJson_Stream_System_Nullable_Guid___">&lt;code>ProtectedPrivateKey.WriteJson()&lt;/code>&lt;/a>. In the future, there will be additional features for integrated management of Key Store directory.&lt;/p>
&lt;p>Currently, Liplanet implements &lt;a href="https://en.wikipedia.org/wiki/PBKDF2">PBKDF2&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Scrypt">Scrypt&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Key_derivation_function">key derivation functions&lt;/a>, and supports &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES&lt;/a>-128-&lt;a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)">CTR&lt;/a> encryption algorithm. The Scrypt implementation has been contributed as &lt;a href="https://github.com/planetarium/libplanet/pull/654">contribution&lt;/a> by &lt;a href="https://github.com/minhoryang">minhoryang&lt;/a>. 🎉&lt;/p>
&lt;h2 id="furthermore">Furthermore,&lt;/h2>
&lt;p>This version includes many contributions from the &lt;a href="https://hacktoberfest.digitalocean.com/">Hacktoberfest&lt;/a> event. You can learn more about the event in &lt;a href="/eng/2019/11/looking-back-at-hacktoberfest/">Looking Back on Hacktoberfest&lt;/a> written by Swen Mun, and all other changes made to this version can be found in [Full Changes] &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.7.0">0.7.0&lt;/a>.&lt;/p>
&lt;p>And as always, if you have any questions about the new release or Libplanet in general, please visit our &lt;a href="https://discord.gg/planetarium">Discord chatroom&lt;/a> and let’s chat!&lt;/p></content><author><name>Seunghun Lee</name><uri>https://github.com/earlbread</uri><email>seunghun@planetariumhq.com</email></author></entry><entry><title>Looking Back on Hacktoberfest</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/11/looking-back-at-hacktoberfest/" title="Looking Back on Hacktoberfest"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/11/looking-back-at-hacktoberfest/" hreflang="ko" title="Hacktoberfest를 돌아보며"/><id>https://snack.planetarium.dev/eng/2019/11/looking-back-at-hacktoberfest/</id><published>2019-11-08T00:00:00+00:00</published><updated>2019-11-08T00:00:00+00:00</updated><content type="html">&lt;p>Hello, today we&amp;rsquo;d like to present you with some of the contributions &lt;a href="https://planetariumhq.com">Planetarium&lt;/a> received from participating in &lt;a href="https://hacktoberfest.digitalocean.com/">Hacktoberfest&lt;/a> during the month of October.&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>For Hacktoberfest, we prepared a total of 36 issues, and 15 were handled through contributions.&lt;/p>
&lt;figure>
&lt;img src="1.png"
alt="Contributed Issues"/> &lt;figcaption>
&lt;p>Contributed Issues&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>After a month of contributions, we learned some interesting facts:&lt;/p>
&lt;ul>
&lt;li>Half the contributions were focused at the beginning of the month. It appears that our contributors were quite eager from the start of Hacktoberfest. 🏃&lt;/li>
&lt;li>Most issues contributed were for beginners (&lt;code>label:&amp;quot;good first issue&amp;quot;&lt;/code>).&lt;/li>
&lt;li>Our 3 projects&amp;ndash; &lt;a href="https://github.com/planetarium/libplanet/">Libplanet&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet-explorer/">Libplanet Explorer&lt;/a>, and &lt;a href="https://github.com/planetarium/libplanet-explorer-frontend/">Libplanet Explorer Frontend&lt;/a>—all received fairly equal contributions.&lt;/li>
&lt;/ul>
&lt;h1 id="memorable-contributions">Memorable Contributions&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/planetarium/libplanet-explorer-frontend/issues/37">Auto refresh when block mined&lt;/a> contributed by &lt;a href="https://github.com/MaxStalker">@MaxStalker&lt;/a> was quite a tough issue, as the number of issue comments indicates. While Libplanet Explorer Frontend requires the GraphQL backend, Libplanet Explorer, the GraphQL backend we prepared kept malfunctioning, causing a long wait for our contributor. 😢 So, we would like to take this opportunity to thank @MaxStalker for completing his contribution by walking us through trouble shooting at our [Discord Chatroom] &lt;a href="https://discord.gg/planetarium">2&lt;/a> even after the service had been normalized. 🙇&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We thank &lt;a href="https://github.com/RozzaysRed">@RozzaysRed&lt;/a> for contributing to issues labeled &lt;em>hacktobberfest&lt;/em> as well as those that weren’t &lt;a href="https://github.com/issues?q=assignee%3ARozzaysRed+is%3Aclosed">3&lt;/a>. If we knew this would’ve happen, we certainly would have put &lt;em>hacktobberfest&lt;/em> label on way more issues. 😊&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In issue &lt;a href="https://github.com/planetarium/libplanet/issues/555">Rename “maxValue” parameters in IRandom.Next() methods&lt;/a>, &lt;a href="https://github.com/pBouillon">@pBouillon&lt;/a> not only made contributions, but also suggested a suitable parameter name (&lt;code>lowerBound&lt;/code> and &lt;code>upperBound&lt;/code>). 💬&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="closing">Closing&lt;/h1>
&lt;p>Furthermore, we would like to thank every single one of you for your interest and contribution to our project during Hacktoberfest.&lt;/p>
&lt;p>Hacktoberfest is over, but fortunately, we&amp;rsquo;re always open and waiting for you. If you&amp;rsquo;re interested in a problem we&amp;rsquo;re working on or would like to join us, please let us know at our [Discord Chatroom] &lt;a href="https://discord.gg/planetarium">2&lt;/a>!&lt;/p></content><author><name>Swen Mun</name><uri>https://github.com/longfin</uri><email>swen@planetariumhq.com</email></author></entry><entry><title>Libplanet 0.6 Released</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/10/libplanet-0.6/" title="Libplanet 0.6 Released"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/10/libplanet-0.6/" hreflang="ko" title="Libplanet 0.6 릴리스"/><id>https://snack.planetarium.dev/eng/2019/10/libplanet-0.6/</id><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><content type="html">&lt;p>Hello everyone, our team has released the 6th minor version of &lt;a href="https://libplanet.io/">Libplanet&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.6.0">Version 0.6&lt;/a>.&lt;/p>
&lt;p>Libplanet is a common library that solves game implementation problems such as P2P communication and data synchronization when creating online multiplayer games that run on distributed P2P.&lt;/p>
&lt;p>In version 0.6 there are significant changes to Libplanet&amp;rsquo;s network configuration, and many bugs are fixed that had not been found before. In this article we will cover those key changes of Version 0.6.&lt;/p>
&lt;h2 id="kademlia-distributed-hash-table-applied">Kademlia Distributed Hash Table Applied&lt;/h2>
&lt;p>In the traditional Libplanet, each peer managed all other peers on the network. Due to the nature of blockchain that transmits every data created, this method manages to work when only a handful of peers are connected to the network, but when the number of peers increase, network communication problem occurs.&lt;/p>
&lt;p>To address this issue, Kademlia protocol, one of the distributed hash table techniques, has been applied to manage more peers in a network. If you are curious about the operation of Kademlia distributed hash table, please refer to &lt;cite>&lt;a href="https://snack.planetarium.dev/eng/2019/09/kademlia/">Applying Kademlia Distributed Hash Table to Libplanet&lt;/a>&lt;/cite>.&lt;/p>
&lt;h2 id="transaction-transmission-method-changed">Transaction Transmission Method Changed&lt;/h2>
&lt;p>When a client creates a transaction, it transmits that data to peers on its routing table, which then synchronizes all peers on the blockchain network.&lt;/p>
&lt;p>The traditional Libplanet worked by transmitting transaction data at regular intervals, and since each peer had a list of all other peers on a network, the entire network was synchronized with one wave. However, with Kademlia distributed hash table applied, a single wave alone could not guarantee synchronization of the entire network. Because each peer re-transmits data it receives from another peer at an interval until the whole network is synchronized, there’s certainly a possibility that the process will take much longer time than we’d like.&lt;/p>
&lt;p>Therefore, from this version, we’ve modified the logic to transmit transaction immediately when transmission begins, preventing long delays in the network synchronization process.&lt;/p>
&lt;h2 id="ensuring-transaction-order-within-a-block">Ensuring Transaction Order within a Block&lt;/h2>
&lt;p>When multiple transactions are included within a block, we must ensure that all clients run the actions in the same order. At the same time, the order of execution must not be predictable until the blocks are mined.&lt;/p>
&lt;p>In order to meet the above conditions, this update allows all clients to run actions in the same order by utilizing the block&amp;rsquo;s &lt;code>Hash&lt;/code> value and the transaction&amp;rsquo;s &lt;code>Id&lt;/code>.&lt;/p>
&lt;h2 id="asynchronous-block-mining">Asynchronous Block Mining&lt;/h2>
&lt;p>Since Libplanet works based on a &lt;a href="https://en.wikipedia.org/wiki/Proof_of_work">Proof of Work&lt;/a> system, it uses a lot of CPU resources during block mining process. In the previous version, because &lt;code>Hashcash.Answer()&lt;/code> which looks for &lt;code>Nonce&lt;/code> in a block was a synchronous function, the running thread was blocked and it was difficult to abort operation.&lt;/p>
&lt;p>From this version, &lt;code>BlockChain&amp;lt;T&amp;gt;.Mine()&lt;/code> is an asynchronous function, meaning users can abort operation at a desired time by using &lt;code>CancellationToken&lt;/code>. Also, when blockchain tip changes during mining, &lt;code>Blockchain &amp;lt;T&amp;gt;.TipChanged&lt;/code> event, which can be subscribed externally, will be called and the mining process will halt when that event occurs.&lt;/p>
&lt;h2 id="furthermore">Furthermore&lt;/h2>
&lt;p>You can learn more about additional changes in our &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.6.0">release notes&lt;/a>.&lt;/p>
&lt;p>And as always, if you have any questions about the new release or Libplanet in general, please visit our &lt;a href="https://discord.gg/planetarium">Discord chatroom&lt;/a> and let’s chat!&lt;/p></content><author><name>Chanhyuck Ko</name><uri>https://github.com/limebell</uri><email>lime@planetariumhq.com</email></author></entry><entry><title>Applying Kademlia Distributed Hash Table to Libplanet</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/09/kademlia/" title="Applying Kademlia Distributed Hash Table to Libplanet"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/09/kademlia/" hreflang="ko" title="Kademlia 분산 해시 테이블 적용기"/><id>https://snack.planetarium.dev/eng/2019/09/kademlia/</id><published>2019-09-27T00:00:00+00:00</published><updated>2019-09-27T00:00:00+00:00</updated><content type="html">&lt;p>Hello, I&amp;rsquo;m Chanhyuck Ko of Planetarium Dev Team. In this post, I&amp;rsquo;m going to take some time to briefly explain what &lt;a href="https://en.wikipedia.org/wiki/Kademlia">Kademlia&lt;/a> is, one of the &lt;a href="https://en.wikipedia.org/wiki/Distributed_hash_table">distributed hash table&lt;/a> techniques for efficiently configuring distributed P2P networks, and why it was applied to our project, &lt;a href="https://libplanet.io/">Libplanet&lt;/a>.&lt;/p>
&lt;h2 id="what-is-kademlia">What is Kademlia?&lt;/h2>
&lt;p>Distributed Hash Tables (DHT) store and manage data across nodes on a network. When locating data on a network, they play a major role in reducing each node’s load by finding the node that has that data first and then asking for a value.&lt;/p>
&lt;p>Various DHT implementations store nodes in their own routing tables in different ways. So how does Kademlia implement a distributed hash table? Let me give you a quick example. Let&amp;rsquo;s go back to 2008 and talk about Kim, a Korean American who lives in Los Angeles. He is visiting Korea to see his friend after a long time, and just got off at Incheon International Airport.&lt;/p>
&lt;blockquote>
&lt;p>I’d like to go to my friend&amp;rsquo;s house, but I don&amp;rsquo;t know where it is.&lt;/p>
&lt;/blockquote>
&lt;p>Gee, I think Kim is lost. In 2019, he would have taken out his smartphone and entered the address, but in 2008, he doesn’t have one because it’s not yet popular. Kim takes a closer look at the only information, the address.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>1-91 Sejong-ro (street), Jongno-gu (district), Seoul (city)&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Without much choice, Kim first heads to Seoul city. And there, he goes up to people and asks them for directions, but not many know where the address is exactly. So, Kim changes his strategy and starts asking how to get to Jongno-gu. There are quite a few people who knows Jongno-gu, and after many twists and turns, Kim arrives at Jongno-gu. Now it&amp;rsquo;s time to ask about Sejong-ro!&lt;/p>
&lt;p>Although Kim didn&amp;rsquo;t know the exact location of the address, he gradually narrowed it down and eventually reached his friend&amp;rsquo;s house. Similar to Kim’s example, each peer on a Kademlia network also maintains and searches for peer information.&lt;/p>
&lt;p>Peers of a network have virtual addresses. It&amp;rsquo;s not a geographical address like &lt;em>&amp;ldquo;1-91 Sejong-ro, Jongno-gu, Seoul&amp;rdquo;&lt;/em>, but a series of bytes assigned at random or by set rules. As for distance, it’s defined as an &lt;a href="https://en.wikipedia.org/wiki/Exclusive_or#Computer_science">exclusive disjunction&lt;/a> of the address values of two peers, rather than the physical distance between the actual peers.&lt;/p>
&lt;p>Instead of containing information from every peer on the network in their routing tables, peers using Kademlia protocol classify them according to the distance defined above and store only a limited number of peers per distance range. Peers with a distance of at least 2&lt;sup>i&lt;/sup> and up to 2&lt;sup>i+1&lt;/sup> are stored in the i-th row of the routing table. This optional storing of peer information in a routing table allows you to locate peer B by requesting information to a peer that is closest to B that you know, and then repeating this series of request until it leads to B.&lt;/p>
&lt;h2 id="reason-for-applying-kademlia">Reason for Applying Kademlia&lt;/h2>
&lt;p>To configure a P2P network that communicates without a server, communication between all peers must be guaranteed. But not all peers have to be directly connected to each other. Take a look at these three peers- A, B and C.&lt;/p>
&lt;p>In a traditional Libplanet, we built a network like this. It was a configuration in which all the peers were connected.&lt;/p>
&lt;figure>
&lt;img src="1.png"
alt="All the peers are connected to each other."/> &lt;figcaption>
&lt;p>All the peers are connected to each other.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>This is not a big deal when the network is small, but if you have, say 1,000 peers, or 10,000 peers, it&amp;rsquo;s a lot of pressure every time you send that message to the network.&lt;/p>
&lt;figure>
&lt;img src="2.png"
alt="Peers overloaded with excessive transmission."/> &lt;figcaption>
&lt;p>Peers overloaded with excessive transmission.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Using Kademlia, each row of routing tables will consist of peers whose distances are within the same range. When transmitting data, you select and send message to all peers in each row of the routing table, and those peers will do the same for all peers in their own tables. Eventually, every peer on the network will be able to receive the message. In this way, when N peers are on the network, one peer will only send a message log(N) times, preventing the network load from being concentrated on one peer.&lt;/p>
&lt;figure>
&lt;img src="3.png"
alt="A Network transmitting messages."/> &lt;figcaption>
&lt;p>A Network transmitting messages.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="to-conclude">To Conclude&lt;/h2>
&lt;p>In order to give users a sense that their actions are processing fast, you need to frequently create blocks of transactions that contain those actions. But the more frequently a block is created, the more network load a miner will receive. To ensure a stable network as its size grows, distributed hash tables had to be applied to Libplanet. In return, we were able to run a test and see that the network load on a single peer was reduced in a harsher setting.&lt;/p>
&lt;p>If you have any questions about Kademlia distributed hash table or Libplanet, please visit our [Discord chatroom] and let’s chat!&lt;/p></content><author><name>Chanhyuck Ko</name><uri>https://github.com/limebell</uri><email>lime@planetariumhq.com</email></author></entry><entry><title>Join Us for Hacktoberfest!</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/09/hacktoberfest/" title="Join Us for Hacktoberfest!"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/09/hacktoberfest/" hreflang="ko" title="저희와 함께 Hacktoberfest에 참가해봅시다!"/><id>https://snack.planetarium.dev/eng/2019/09/hacktoberfest/</id><published>2019-09-26T00:00:00+00:00</published><updated>2019-09-26T00:00:00+00:00</updated><content type="html">&lt;div style="display: block; margin: auto; margin-top: 30px; width: 500px;">&lt;a href="https://hacktoberfest.digitalocean.com/">&lt;img src="hacktoberfest.png" width="500">&lt;/a>&lt;/div>
&lt;p>Greetings All! The month of Hacktoberfest has finally arrived.&lt;/p>
&lt;p>Is this your first time hearing about &lt;dfn>&lt;a href="https://hacktoberfest.digitalocean.com/">Hacktoberfest&lt;/a>&lt;/dfn>? Hacktoberfest is an open source event that lasts for a month from October 1st to 31st. The event is open to everyone around the world and all you have to do is participate anytime within October and submit 4 pull requests to the Github Public Repository.&lt;/p>
&lt;p>Send 4 pull requests and you&amp;rsquo;ll get either a T-shirt or a sticker from the event host like DigitalOcean.   And we’re happy to announce that Project &lt;a href="https://github.com/planetarium/libplanet/issues?q=label:hacktoberfest+is:open+is:issue">Libplanet&lt;/a> is also participating in the event this year!&lt;/p>
&lt;h2 id="so-how-do-we-get-started">So How Do We Get Started?&lt;/h2>
&lt;p>If you’d like to participate in Hacktoberfest, but just don’t know what to contribute to and send a pull request, you’re in luck.  
We’ve put up &lt;q>&lt;em>hacktoberfest&lt;/em>&lt;/q> labels on issues that are great for new contributors trying to participate in Hacktoberfest. So, you can pick the issues with the &lt;q>hacktoberfest&lt;/q> label that you’d like to work on and leave a comment saying you&amp;rsquo;re starting your work. Please take a look at the issues tracker of our projects—&lt;a href="https://github.com/planetarium/libplanet/issues?q=label:hacktoberfest+is:open+is:issue">Libplanet&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet-explorer/issues?q=label:hacktoberfest+is:open+is:issue">Libplanet Explorer&lt;/a>, and &lt;a href="https://github.com/planetarium/libplanet-explorer-frontend/issues?q=label:hacktoberfest+is:open+is:issue">Libplanet Explorer Frontend&lt;/a>. &lt;/p>
&lt;figure>
&lt;img src="hacktoberfest-issues.png"
alt="Issues labeled hacktoberfest" width="500"/> &lt;figcaption>
&lt;p>Issues labeled &lt;q>hacktoberfest&lt;/q>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Once you get started, you&amp;rsquo;ll be talking to other open source contributors through comments and chat. If it’s your first time participating in an open source project, maintainers and other contributors will help so don’t worry.&lt;/p>
&lt;p>For more information on goods and others, please visit the &lt;a href="https://hacktoberfest.digitalocean.com/">Hacktoberfest Official Site&lt;/a>. &lt;/p>
&lt;h2 id="questions-and-conversations">Questions and Conversations&lt;/h2>
&lt;p>If you have any questions or difficulties while contributing to Hacktoberfest, we can certainly talk in the comments. But we hope you can come to our &lt;a href="https://discord.gg/planetarium">Discord chatroom&lt;/a> where it’s much easier to communicate! And of course, you are always welcome well beyond Hacktoberfest.&lt;/p></content><author><name>Lee Dogeon</name><uri>https://github.com/moreal</uri><email>dogeon@planetariumhq.com</email></author></entry><entry><title>Libplanet 0.5 Released</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/09/libplanet-0.5/" title="Libplanet 0.5 Released"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/09/libplanet-0.5/" hreflang="ko" title="Libplanet 0.5 릴리스"/><id>https://snack.planetarium.dev/eng/2019/09/libplanet-0.5/</id><published>2019-09-06T00:00:00+00:00</published><updated>2019-09-06T00:00:00+00:00</updated><content type="html">&lt;p>Hello all, we’re delighted to announce that the 5th minor version of &lt;a href="https://libplanet.io/">Libplanet&lt;/a>—&lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.5.0">Version 0.5&lt;/a> along with patch versions, &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.5.1">0.5.1&lt;/a> and &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.5.2">0.5.2&lt;/a>, has been released.&lt;/p>
&lt;p>Libplanet is a common library that solves game implementation problems such as P2P communication and data synchronization when creating online multiplayer games that run on distributed P2P.&lt;/p>
&lt;p>Version 0.5 includes extensive performance and reliability improvements addressed while testing games developed with Libplanet. This post will cover those major changes of Version 0.5.&lt;/p>
&lt;h2 id="abbr-titleinitial-block-downloadibdabbr-speed-improvement">&lt;abbr title="Initial Block Download">IBD&lt;/abbr> Speed Improvement&lt;/h2>
&lt;p>Previously, &lt;a href="https://bitcoin.org/en/glossary/initial-block-download">&lt;abbr title="initial block download">IBD&lt;/abbr>&lt;/a> used to take a long time to execute, even for a small number of blocks. This was because after downloading the blocks, you had to calculate the final state starting from the first block.&lt;/p>
&lt;p>However, if you have a reliable node, it is quite possible to effectively reduce computing time by using precalculated results from that node.&lt;/p>
&lt;p>So, from Version 0.5, by handing over trusted nodes as parameters to &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Net.Swarm-1.html#Libplanet_Net_Swarm_1_PreloadAsync_System_IProgress_Libplanet_Net_PreloadState__System_Collections_Immutable_IImmutableSet_Libplanet_Address__System_Threading_CancellationToken_">&lt;code>Swarm&amp;lt;T&amp;gt;.PreloadAsync()&lt;/code>&lt;/a>, we’re now able to receive, store, and use the most recent state values already computed from those trusted nodes.&lt;/p>
&lt;p>If there aren’t any trusted nodes or the process fails for another reason, IBD computes in the same process as previous versions.&lt;/p>
&lt;h2 id="irandomnextdouble-removed">&lt;code>IRandom.NextDouble()&lt;/code> Removed&lt;/h2>
&lt;p>Quoting from the &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.double?view=netstandard-2.0#remarks">System.Double section of .NET Standard Official Document&lt;/a>, it states:&lt;/p>
&lt;blockquote>
&lt;p>In addition, the result of arithmetic and assignment operations with &lt;code>Double&lt;/code> values may differ slightly by platform because of the loss of precision of the &lt;code>Double&lt;/code> type. For example, the result of assigning a literal &lt;code>Double&lt;/code> value may differ in the 32-bit and 64-bit versions of the .NET Framework.&lt;/p>
&lt;/blockquote>
&lt;p>As stated above, arithmetic operations and substitution of Double can cause indeterminant results. Because of this, we’ve decided not to provide &lt;a href="https://github.com/planetarium/libplanet/pull/419">&lt;code>IRandom.NextDouble()&lt;/code>&lt;/a> from this version onwards.&lt;/p>
&lt;p>Please refer to &lt;a href="https://randomascii.wordpress.com/2013/07/16/floating-point-determinism/">this article&lt;/a> for further information.&lt;/p>
&lt;h2 id="block-action">Block Action&lt;/h2>
&lt;p>In order to keep chains secure, we need miners to mine the blocks, and we need to reward miners to recruit and keep them.&lt;/p>
&lt;p>Previously for miners to be rewarded, they had to add a transaction with reward actions to the block each time. But from this version, the new &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Blockchain.Policies.IBlockPolicy-1.html#Libplanet_Blockchain_Policies_IBlockPolicy_1_BlockAction">&lt;code>IBlockPolicy&amp;lt;T&amp;gt;.BlockAction&lt;/code>&lt;/a> property, which is executed for every block, enables code implementation that rewards miners for each block action.&lt;/p>
&lt;h2 id="filestore-removed">&lt;code>FileStore&lt;/code> Removed&lt;/h2>
&lt;p>Libplanet had been providing an interface called &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Store.IStore.html">&lt;code>IStore&lt;/code>&lt;/a>, &lt;a href="https://docs.libplanet.io/0.4.0/api/Libplanet.Store.FileStore.html">&lt;code>FileStore&lt;/code>&lt;/a> (a file-based implementation of &lt;code>IStore&lt;/code>), as well as &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Store.LiteDBStore.html">&lt;code>LiteDBStore&lt;/code>&lt;/a> (implementation based on &lt;a href="https://www.litedb.org/">LiteDB&lt;/a>) since Version &lt;a href="/eng/2019/07/libplanet-0.4/">0.4&lt;/a> to simplify the storage layer. Despite the benefits of its simplistic implementation, however, &lt;code>FileStore&lt;/code> also had the following limitations:&lt;/p>
&lt;ul>
&lt;li>There were just too many files created because every block, every transaction, and the status of every account block were stored as separate files.&lt;/li>
&lt;li>With no separate cache or buffer, I/O performance was significantly affected by what physical storage device were used.&lt;/li>
&lt;/ul>
&lt;p>As we started using LiteDB, &lt;code>FileStore&lt;/code> usage rate began to diminish. And so, considering the difficulty of continuously managing &lt;code>FileStore&lt;/code>, we decided not to provide &lt;code>FileStore&lt;/code> implementation from Version 0.5.&lt;/p>
&lt;h2 id="more-detailed-preload-progress">More Detailed Preload Progress&lt;/h2>
&lt;p>To carry out the IBD mentioned above, you can call the &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Net.Swarm-1.html#Libplanet_Net_Swarm_1_PreloadAsync_System_IProgress_Libplanet_Net_PreloadState__System_Collections_Immutable_IImmutableSet_Libplanet_Address__System_Threading_CancellationToken_">&lt;code>Swarm&amp;lt;T&amp;gt;.PreloadAsync()&lt;/code>&lt;/a> method. And previously, sending &lt;code>IProgress&amp;lt;BlockDownloadState&amp;gt;&lt;/code> to this method’s parameter could tell us about the progress of the block download, but it couldn’t tell us about the specific progress from running actions to the final status after the block download (or from a trusted node).&lt;/p>
&lt;p>Therefore, the waiting time of this previous method had to be quite boring for players since the loading message only showed either &lt;q>loading&lt;/q> or &lt;q>100%&lt;/q> and no specific progress of the block download.&lt;/p>
&lt;p>However, from Version 0.5, by receiving the &lt;code>IProgress&amp;lt;PreloadState&amp;gt;&lt;/code> type parameter instead of &lt;code>IProgress&amp;lt;BlockDownloadState&amp;gt;&lt;/code>, this allows us to get a detailed view of the entire preload progress.&lt;/p>
&lt;p>Through &lt;code>IProgress&amp;lt;PreloadState&amp;gt;&lt;/code> object which receives &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Net.BlockDownloadState.html">&lt;code>BlockDownloadState&lt;/code>&lt;/a>, &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Net.BlockStateDownloadState.html">&lt;code>BlockStateDownloadState&lt;/code>&lt;/a>, &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Net.StateReferenceDownloadState.html">&lt;code>StateReferenceDownloadState&lt;/code>&lt;/a> and &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Net.ActionExecutionState.html">&lt;code>ActionExecutionState&lt;/code>&lt;/a> as parameters inherited from &lt;a href="https://docs.libplanet.io/0.5.0/api/Libplanet.Net.PreloadState.html">&lt;code>PreloadState&lt;/code>&lt;/a>, users are provided with more detailed information.&lt;/p>
&lt;h2 id="furthermore">Furthermore&lt;/h2>
&lt;p>You can learn more about additional changes in our &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.5.0">0.5.0&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.5.1">0.5.1&lt;/a>, &lt;a href="https://github.com/planetarium/libplanet/releases/tag/0.5.2">0.5.2&lt;/a> release notes.&lt;/p>
&lt;p>And as always, if you have any questions about the new release or Libplanet in general, please visit our &lt;a href="https://discord.gg/planetarium">Discord chatroom&lt;/a> and let’s chat!&lt;/p></content><author><name>Lee Dogeon</name><uri>https://github.com/moreal</uri><email>dogeon@planetariumhq.com</email></author></entry><entry><title>Libplanet at PyCon 2019 Sprint</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/08/pycon-sprint-2019/" title="Libplanet at PyCon 2019 Sprint"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/08/pycon-sprint-2019/" hreflang="ko" title="파이콘 스프린트에 다녀오다"/><id>https://snack.planetarium.dev/eng/2019/08/pycon-sprint-2019/</id><published>2019-08-21T00:00:00+00:00</published><updated>2019-08-21T00:00:00+00:00</updated><content type="html">&lt;p>Hello, I&amp;rsquo;m Lee Dogeon, &lt;a href="https://github.com/planetarium/libplanet">Libplanet&lt;/a> committer at Planetarium!&lt;/p>
&lt;p>This past August 15th and 16th, our team participated at &lt;a href="https://www.pycon.kr/program/sprint?lang=en-US">PyCon 2019 Sprint&lt;/a> as leader of Project &lt;a href="https://github.com/planetarium/libplanet">Libplanet&lt;/a>. In this article, I&amp;rsquo;d like to briefly talk about the contributions we received at PyCon Sprint.&lt;/p>
&lt;h2 id="contributions-at-pycon-2019-sprint">Contributions at PyCon 2019 Sprint&lt;/h2>
&lt;p>Thanks to all our participants at the Sprint, many features were added to &lt;a href="https://github.com/planetarium/libplanet">Libplanet&lt;/a>, as well as &lt;a href="https://github.com/planetarium/libplanet-explorer">Libplanet Explorer&lt;/a> and &lt;a href="https://github.com/planetarium/libplanet-explorer-frontend">Libplanet Explorer Frontend&lt;/a>!&lt;/p>
&lt;p>&lt;a href="https://github.com/planetarium/libplanet-explorer">Libplanet Explorer&lt;/a> is a project that helps you search blocks created in games developed with Libplanet through &lt;a href="https://graphql.org/">GraphQL&lt;/a>, and &lt;a href="https://github.com/planetarium/libplanet-explorer-frontend">Libplanet Explorer Frontend&lt;/a> is a TypeScript + React project to make Libplanet Explorer easier to see in your browser.&lt;/p>
&lt;p>&lt;img src="./balloon.jpg" alt="balloon">&lt;/p>
&lt;p>The PyCon Organizing Team awarded us a balloon whenever we send a &lt;abbr title="pull request">PR&lt;/abbr> and so I&amp;rsquo;d like to share some of the PR&amp;rsquo;s that helped us receive a bunch of these balloons at the event!&lt;/p>
&lt;h3 id="suspicious-activity-in-the-number-of-blocks-downloaded">Suspicious Activity in the Number of Blocks Downloaded&lt;/h3>
&lt;p>When a node (A) receives a query from another node (B) about a block’s content that the node (B) doesn&amp;rsquo;t have, it (A) divides the block into a certain number and passes the block hash to the node (B) that sent the query.&lt;/p>
&lt;p>But there was a problem in this process in which apart from the first response, the number of block hash received was one less than the expected amount. Contributor &lt;a href="https://github.com/gurrpi">Daehyun Paik&lt;/a> set off on a quest to solve this problem.&lt;/p>
&lt;p>And thanks to his contribution, we now can send and receive block hashes in the right amount.&lt;/p>
&lt;h3 id="hiding-empty-blocks">Hiding Empty Blocks!&lt;/h3>
&lt;p>&lt;a href="https://github.com/planetarium/libplanet">Libplanet&lt;/a> only accepts the longest chain as &lt;a href="https://en.bitcoin.it/wiki/Proof_of_work">Proof of Work&lt;/a>, so it constantly creates blocks even if there aren’t any transaction. But when searching for transactions rather than the block itself, the query results are mixed with empty blocks, making the process quite cumbersome.&lt;/p>
&lt;p>Since the blocks we&amp;rsquo;re interested in are mainly those with transactions, contributor &lt;a href="https://github.com/hyeguiee">Ha Hyemi&lt;/a> added another option to Libplanet through her contribution!&lt;/p>
&lt;p>Now we have an option to only see the blocks with transactions.&lt;/p>
&lt;h3 id="frontend-docking">Frontend Docking!&lt;/h3>
&lt;p>&lt;a href="https://docker.io/">Docker&lt;/a> is a tool that make it easy to create, deploy, and run applications using containers.&lt;/p>
&lt;p>Contributor &lt;a href="https://github.com/minhoryang">Minho Ryang&lt;/a> helped us create a docker file for &lt;a href="https://github.com/planetarium/libplanet-explorer-frontend">Libplanet Explorer Frontend&lt;/a>, providing us with an environment in which we can easily distribute Libplanet Explorer anywhere or run it locally.&lt;/p>
&lt;h3 id="frontend-changes">Frontend Changes!&lt;/h3>
&lt;p>Due to changes in &lt;a href="https://github.com/planetarium/libplanet-explorer">Libplanet Explorer&lt;/a> or for independent reasons, several features have been added to the frontend of Libplanet Explorer.&lt;/p>
&lt;p>Thanks to contributions by &lt;a href="https://github.com/AiOO">Ahn Kiwook&lt;/a>, &lt;a href="https://github.com/kanghyojun">Kang Hyojun&lt;/a>, and &lt;a href="https://github.com/aucch">aucch&lt;/a>, we now have options to filter blocks without transactions and we can also show block creation times as well as average difficulty!&lt;/p>
&lt;p>&lt;img src="./frontend-screenshot.png" alt="frontend-screeshot">&lt;/p>
&lt;p>We now also have a separate transaction page to review details of each transaction!&lt;/p>
&lt;p>&lt;img src="./frontend-screenshot-transaction.png" alt="frontend-screenshot">&lt;/p>
&lt;h2 id="contributions-are-always-welcome">Contributions Are Always Welcome!&lt;/h2>
&lt;p>Sprint or not, questions or contributions to Project Libplanet are welcome any time! We invite you all to visit our &lt;a href="https://github.com/planetarium/libplanet">GitHub repository&lt;/a> and leave comments on the issue or join &lt;a href="https://discord.gg/wUgwkYW">our Discord server&lt;/a> and ask us directly.&lt;/p></content><author><name>Lee Dogeon</name><uri>https://github.com/moreal</uri><email>dogeon@planetariumhq.com</email></author></entry><entry><title>Experiencing Unity Test Runner</title><link rel="alternate" href="https://snack.planetarium.dev/eng/2019/07/unity-test-runner/" title="Experiencing Unity Test Runner"/><link rel="alternate" href="https://snack.planetarium.dev/kor/2019/07/unity-test-runner/" hreflang="ko" title="Unity 테스트 러너 도입기"/><id>https://snack.planetarium.dev/eng/2019/07/unity-test-runner/</id><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><content type="html">&lt;p>Hello, I&amp;rsquo;m Yang Chunung, game developer at Planetarium. Today I&amp;rsquo;m here to talk about my experience using the &lt;a href="https://docs.unity3d.com/Manual/testing-editortestsrunner.html">Unity Test Runner&lt;/a>.&lt;/p>
&lt;h2 id="before-i-start">Before I Start&lt;/h2>
&lt;p>I am currently developing blockchain games using &lt;a href="https://github.com/planetarium/libplanet.net">Libplanet&lt;/a> and Unity. After joining the team and learning that we’d be developing games with Unity, I had this rather unfounded confidence thinking, “I’ve had plenty of GUI programming experience, so how hard could it be?” (note: I had no prior experience with Unity).&lt;/p>
&lt;p>Obviously, my lacking Unity experience led me to give up testing when I first started the project, but as time went on, the need for testing grew and that’s when I found the Unity Test Runner.&lt;/p>
&lt;p>The Unity Test Runner is a built-in test tool provided by Unity. After creating a &lt;a href="https://nunit.org/">NUnit&lt;/a>-based test, you can run the test in Unity Editor by building a testing environment&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> in both Play Mode and Edit Mode.&lt;/p>
&lt;h2 id="assembly-definition-files">Assembly Definition Files&lt;/h2>
&lt;p>After making a test script using the documents, I ran into a problem. While other libraries were recognized without any issue, the test script couldn’t recognize the namespace of the actual game code that I wanted to test. The reason was that unlike &lt;em>Assembly-CSharp.dll&lt;/em>, which is automatically recognized in Unity editor, the game project script couldn’t be recognized within the test script. &lt;/p>
&lt;figure>
&lt;img src="tests-asmdef.png"
alt="Adding Dependencies on Tests.asmdef"/> &lt;figcaption>
&lt;p>Adding Dependencies on &lt;em>Tests.asmdef&lt;/em>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Creating an assembly definition file that defines a project script and then adding dependencies to the assembly definition file&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> defined for testing will solve the problem.&lt;/p>
&lt;p>Please refer to the &lt;a href="https://docs.unity3d.com/2018.3/Documentation/Manual/ScriptCompilationAssemblyDefinitionFiles.html">relevant documentation&lt;/a> for more information.&lt;/p>
&lt;h2 id="platform-settings-for-assembly-definition-files">Platform Settings for Assembly Definition Files&lt;/h2>
&lt;p>Even after creating the assembly definition file, the third-party library that works well in the editor broke down when building due to recognition failure.
This problem was caused by the assembly definition file trying to include the extended editor features sometimes provided in libraries within the build.&lt;/p>
&lt;figure>
&lt;img src="unity-platform.png"
alt="Check only Editor"/> &lt;figcaption>
&lt;p>Check only Editor&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>The solution is quite simple: create a separate editor definition file inside that library’s &lt;em>Editor&lt;/em> folder and change the &lt;em>Include Platforms&lt;/em> setting to only &lt;em>Editor&lt;/em>.&lt;/p>
&lt;h2 id="running-the-test">Running the Test&lt;/h2>
&lt;p>When ready, create the test and run it in the editor. Results can be viewed directly from the Test Runner window. &lt;/p>
&lt;figure>
&lt;img src="test-result.png"
alt="Test Results"/> &lt;figcaption>
&lt;p>Test Results&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Although there are still more codes in the current project that have not been tested, since the Unity Test Runner has been applied, we&amp;rsquo;ve been writing tests together for bug fixes and new add-ons, which has saved us a lot of time in checking production and logic &amp;mdash; something we used to check by running the game every time.
For other projects that also use Unity, I confidently recommend that you apply the Unity Test Runner to increase productivity and enhance overall project experience. Thank you!&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Unity player built for that platform can automatically build and run Play Mode Testing on its own. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>If you didn’t do a separate setting when creating the test runner in the editor, it will be created as &lt;em>Assets/Tests/Test.asmdef&lt;/em>. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content><author><name>Yang ChunUng</name><uri>https://github.com/ipdae</uri><email>yang@planetariumhq.com</email></author></entry></feed>